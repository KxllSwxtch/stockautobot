import threading
import time
import telebot
import psycopg2
import os
import re
import requests
import locale
import datetime
import logging
import urllib.parse
import random

from io import BytesIO
from telebot import types
from dotenv import load_dotenv
from urllib.parse import urlparse, parse_qs
from get_google_krwrub_rate import get_krwrub_rate
from get_google_usdrub_rate import get_usdrub_rate
from utils import (
    clear_memory,
    calculate_age,
    format_number,
    get_customs_fees,
    clean_number,
    get_rub_to_krw_rate,
    generate_encar_photo_url,
)


CALCULATE_CAR_TEXT = "–†–∞—Å—á—ë—Ç –ø–æ —Å—Å—ã–ª–∫–µ —Å Encar"
MANUAL_CAR_TEXT = "–†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"
DEALER_COMMISSION = 0.00  # 2%

# –°–ø–∏—Å–æ–∫ User-Agent'–æ–≤ (–º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω—è—Ç—å)
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
    "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 16_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.2 Mobile/15E148 Safari/604.1",
]

PROXIES = {
    "http": "http://B01vby:GBno0x@45.118.250.2:8000",
    "https": "http://B01vby:GBno0x@45.118.250.2:8000",
}


# Configure logging
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# Load keys from .env file
load_dotenv()
bot_token = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(bot_token)

# Set locale for number formatting
locale.setlocale(locale.LC_ALL, "en_US.UTF-8")

# Storage for the last error message ID
last_error_message_id = {}

# global variables
car_data = {}
user_manual_input = {}
car_id_external = ""
total_car_price = 0
users = set()
admins = [728438182, 1684782464]  # –∞–¥–º–∏–Ω—ã
car_month = None
car_year = None

usd_rate = 0
krw_rub_rate = None
eur_rub_rate = None
rub_to_krw_rate = None

vehicle_id = None
vehicle_no = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import psycopg2
from psycopg2 import sql
from telebot import types

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
# DATABASE_URL = os.getenv("DATABASE_URL")
# conn = psycopg2.connect(DATABASE_URL, sslmode="require")
# cursor = conn.cursor()
# print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")


# def save_user_to_db(user_id, username, first_name, phone_number):
#     """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
#     if username is None or phone_number is None:
#         return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–∫—Ä—ã—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

#     try:
#         conn = psycopg2.connect(DATABASE_URL, sslmode="require")
#         cursor = conn.cursor()

#         # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
#         query = sql.SQL(
#             """
#             INSERT INTO users (user_id, username, first_name, phone_number)
#             VALUES (%s, %s, %s, %s)
#             ON CONFLICT (user_id) DO NOTHING;
#         """
#         )

#         cursor.execute(query, (user_id, username, first_name, phone_number))
#         conn.commit()
#         cursor.close()
#         conn.close()
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


@bot.message_handler(commands=["start"])
def send_welcome(message):
    """–ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –µ–≥–æ"""
    user = message.from_user
    user_id = user.id
    username = user.username
    first_name = user.first_name

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ username
    if username is None:
        username = ""

    bot.send_message(
        message.chat.id,
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –°—Ç–æ–∫ –ê–≤—Ç–æ. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–∏ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞.",
        reply_markup=main_menu(),
    )


# @bot.message_handler(commands=["stats"])
# def show_statistics(message):
#     """–ö–æ–º–∞–Ω–¥–∞ /stats –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
#     user_id = message.chat.id  # –ü–æ–ª—É—á–∞–µ–º user_id —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É

#     if user_id not in admins:
#         bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#         return

#     try:
#         conn = psycopg2.connect(DATABASE_URL, sslmode="require")
#         cursor = conn.cursor()

#         cursor.execute("SELECT user_id, username, first_name, created_at FROM users;")
#         users = cursor.fetchall()

#         cursor.close()
#         conn.close()

#         if not users:
#             bot.send_message(user_id, "üìä –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
#             return

#         messages = []
#         stats_message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
#         count = 1

#         for user in users:
#             user_id_db, username, first_name, created_at = user
#             username_text = f"@{username}" if username else "‚Äî"
#             user_info = (
#                 f"üë§ <b>{count}. {first_name}</b> ({username_text}) ‚Äî "
#                 f"{created_at.strftime('%Y-%m-%d')}\n"
#             )

#             # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 4000 —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
#             if len(stats_message) + len(user_info) > 4000:
#                 messages.append(stats_message)
#                 stats_message = ""

#             stats_message += user_info
#             count += 1

#         messages.append(stats_message)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö

#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
#         for msg in messages:
#             bot.send_message(user_id, msg, parse_mode="HTML")

#     except Exception as e:
#         bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
#         print(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


def is_subscribed(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª GetAuto"""
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –Ω–µ —Ç—Ä–µ–±—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if user_id in admins:
        return True

    channel_username = "@stok_auto_krd"
    try:
        chat_member = bot.get_chat_member(channel_username, user_id)
        status = chat_member.status
        print(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {status}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–Ω–∞–ª–∞
        is_member = status in ["member", "administrator", "creator", "owner"]
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {is_member}")
        return is_member

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
        return False


def print_message(message):
    print("\n\n##############")
    print(f"{message}")
    print("##############\n\n")
    return None


@bot.message_handler(commands=["setbroadcast"])
def set_broadcast(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Ä—É—á–Ω—É—é"""
    if message.chat.id not in admins:
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    bot.register_next_step_handler(message, process_broadcast)


def process_broadcast(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
    text = message.text
    bot.send_message(message.chat.id, f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...\n\n{text}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    send_broadcast(text)


# def send_broadcast(text):
#     """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –±–∞–∑—ã"""
#     try:
#         conn = psycopg2.connect(DATABASE_URL, sslmode="require")
#         cursor = conn.cursor()
#         cursor.execute(
#             "SELECT user_id, username FROM users WHERE username IS NOT NULL AND phone_number IS NOT NULL"
#         )
#         users = cursor.fetchall()

#         count = 0  # –°—á—ë—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

#         for user in users:
#             user_id, username = user
#             personalized_text = f"{username}, –Ω–∞ —Å–≤—è–∑–∏ GetAuto!\n\n{text}"
#             try:
#                 bot.send_message(user_id, personalized_text, parse_mode="HTML")
#                 count += 1
#                 time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏
#             except Exception as e:
#                 print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

#         bot.send_message(
#             message.chat.id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π."
#         )
#     except Exception as e:
#         bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")
#         print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
#     finally:
#         cursor.close()
#         conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
def set_bot_commands():
    commands = [
        types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand("cbr", "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç"),
        # types.BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    ]
    bot.set_my_commands(commands)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å API
def get_currency_rates():
    global usd_rate, krw_rub_rate, eur_rub_rate

    print_message("–ü–û–õ–£–ß–ê–ï–ú –ö–£–†–° –¶–ë")

    url = "https://www.cbr-xml-daily.ru/daily_json.js"

    headers = {
        "User-Agent": random.choice(USER_AGENTS),
        "Accept": "application/json",
    }

    response = requests.get(url, headers=headers)

    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤. –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤."

    try:
        data = response.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."

    eur = data["Valute"]["EUR"]["Value"] + (
        data["Valute"]["EUR"]["Value"] * DEALER_COMMISSION
    )

    usd = get_usdrub_rate()
    usd_rate = usd

    krw = get_krwrub_rate()
    krw_rub_rate = krw

    eur_rub_rate = eur

    rates_text = f"EUR: <b>{eur:.2f} ‚ÇΩ</b>\n" f"KRW: <b>{krw:.5f} ‚ÇΩ</b>\n"

    return rates_text


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cbr
@bot.message_handler(commands=["cbr"])
def cbr_command(message):
    try:
        rates_text = get_currency_rates()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(
            message.chat.id, rates_text, reply_markup=keyboard, parse_mode="HTML"
        )
    except Exception as e:
        bot.send_message(
            message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /currencyrates
@bot.message_handler(commands=["currencyrates"])
def currencyrates_command(message):
    bot.send_message(message.chat.id, "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: ...")


# Main menu creation function
def main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.add(
        types.KeyboardButton(CALCULATE_CAR_TEXT),
        types.KeyboardButton(MANUAL_CAR_TEXT),
        types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É"),
        types.KeyboardButton("–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Å?"),
        types.KeyboardButton("–ú—ã –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö"),
        types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp"),
        types.KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–µ–¥–∏—Ç"),
    )
    return keyboard


# Start command handler
@bot.message_handler(commands=["start"])
def send_welcome(message):
    user = message.from_user
    user_id = user.id
    username = user.username
    first_name = user.first_name
    phone_number = (
        user.phone_number if hasattr(user, "phone_number") else None
    )  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    try:
        if not is_subscribed(user_id):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/stok_auto_krd"
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"
                )
            )
            bot.send_message(
                user_id,
                "üö´ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
                reply_markup=keyboard,
            )
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        bot.send_message(
            user_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu(),
        )
        return

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    welcome_message = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!\n\n"
        "–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –°—Ç–æ–∫ –ê–≤—Ç–æ. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è –≤–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–∏ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    bot.send_message(user_id, welcome_message, reply_markup=main_menu())


# Error handling function
def send_error_message(message, error_text):
    global last_error_message_id

    # Remove previous error message if it exists
    if last_error_message_id.get(message.chat.id):
        try:
            bot.delete_message(message.chat.id, last_error_message_id[message.chat.id])
        except Exception as e:
            logging.error(f"Error deleting message: {e}")

    # Send new error message and store its ID
    error_message = bot.reply_to(message, error_text, reply_markup=main_menu())
    last_error_message_id[message.chat.id] = error_message.id
    logging.error(f"Error sent to user {message.chat.id}: {error_text}")


def get_car_info(url):
    global car_id_external, vehicle_no, vehicle_id, car_year, car_month

    # driver = create_driver()

    car_id_match = re.findall(r"\d+", url)
    car_id = car_id_match[0]
    car_id_external = car_id

    url = f"https://api.encar.com/v1/readside/vehicle/{car_id}"

    headers = {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
        "Referer": "http://www.encar.com/",
        "Cache-Control": "max-age=0",
        "Connection": "keep-alive",
    }

    response = requests.get(url, headers=headers).json()

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    car_make = response["category"]["manufacturerEnglishName"]  # –ú–∞—Ä–∫–∞
    car_model = response["category"]["modelGroupEnglishName"]  # –ú–æ–¥–µ–ª—å
    car_trim = response["category"]["gradeDetailEnglishName"] or ""  # –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è

    car_title = f"{car_make} {car_model} {car_trim}"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é
    car_price = str(response["advertisement"]["price"])
    car_date = response["category"]["yearMonth"]
    year = car_date[2:4]
    month = car_date[4:]
    car_year = year
    car_month = month

    # –ü—Ä–æ–±–µ–≥ (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    mileage = response["spec"]["mileage"]
    formatted_mileage = f"{mileage:,} –∫–º"

    # –¢–∏–ø –ö–ü–ü
    transmission = response["spec"]["transmissionName"]
    formatted_transmission = "–ê–≤—Ç–æ–º–∞—Ç" if "Ïò§ÌÜ†" in transmission else "–ú–µ—Ö–∞–Ω–∏–∫–∞"

    car_engine_displacement = str(response["spec"]["displacement"])
    car_type = response["spec"]["bodyName"]

    # –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10)
    car_photos = [
        generate_encar_photo_url(photo["path"]) for photo in response["photos"][:10]
    ]
    car_photos = [url for url in car_photos if url]

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    vehicle_no = response["vehicleNo"]
    vehicle_id = response["vehicleId"]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    formatted_car_date = f"01{month}{year}"
    formatted_car_type = "crossover" if car_type == "SUV" else "sedan"

    print_message(
        f"ID: {car_id}\nType: {formatted_car_type}\nDate: {formatted_car_date}\nCar Engine Displacement: {car_engine_displacement}\nPrice: {car_price} KRW"
    )

    return [
        car_price,
        car_engine_displacement,
        formatted_car_date,
        car_title,
        formatted_mileage,
        formatted_transmission,
        car_photos,
        year,
        month,
    ]


# Function to calculate the total cost
def calculate_cost(link, message):
    global car_data, car_id_external, car_month, car_year, krw_rub_rate, eur_rub_rate, rub_to_krw_rate

    print_message("–ó–ê–ü–†–û–° –ù–ê –†–ê–°–ß–Å–¢ –ê–í–¢–û–ú–û–ë–ò–õ–Ø")

    # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç
    get_currency_rates()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    processing_message = bot.send_message(
        message.chat.id, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥"
    )

    car_id = None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
    if "fem.encar.com" in link:
        car_id_match = re.findall(r"\d+", link)
        if car_id_match:
            car_id = car_id_match[0]  # Use the first match of digits
            car_id_external = car_id
            link = f"https://fem.encar.com/cars/detail/{car_id}"
        else:
            send_error_message(message, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å carid –∏–∑ —Å—Å—ã–ª–∫–∏.")
            return
    else:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º carid —Å URL encar
        parsed_url = urlparse(link)
        query_params = parse_qs(parsed_url.query)
        car_id = query_params.get("carid", [None])[0]

    result = get_car_info(link)
    (
        car_price,
        car_engine_displacement,
        formatted_car_date,
        car_title,
        formatted_mileage,
        formatted_transmission,
        car_photos,
        year,
        month,
    ) = result

    if not car_price and car_engine_displacement and formatted_car_date:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/Petrov1982_777"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )
        bot.send_message(
            message.chat.id, "–û—à–∏–±–∫–∞", parse_mode="Markdown", reply_markup=keyboard
        )
        bot.delete_message(message.chat.id, processing_message.message_id)
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞
    if car_price and car_engine_displacement and formatted_car_date:
        car_engine_displacement = int(car_engine_displacement)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        formatted_car_year = f"20{car_year}"
        engine_volume_formatted = f"{format_number(car_engine_displacement)} cc"
        age = calculate_age(int(formatted_car_year), car_month)

        age_formatted = (
            "–¥–æ 3 –ª–µ—Ç"
            if age == "0-3"
            else (
                "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç"
                if age == "3-5"
                else "–æ—Ç 5 –¥–æ 7 –ª–µ—Ç" if age == "5-7" else "–æ—Ç 7 –ª–µ—Ç"
            )
        )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –≤ —Ä—É–±–ª–∏
        price_krw = int(car_price) * 10000

        response = get_customs_fees(
            car_engine_displacement,
            price_krw,
            int(f"20{car_year}"),
            car_month,
            engine_type=1,
        )

        # –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä
        customs_fee = clean_number(response["sbor"])
        customs_duty = clean_number(response["tax"])
        recycling_fee = clean_number(response["util"])

        # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ä—É–±–ª—è—Ö
        total_cost = (
            +(price_krw * krw_rub_rate)
            + (440000 * krw_rub_rate)
            + (100000 * krw_rub_rate)
            + (350000 * krw_rub_rate)
            + (600 * usd_rate)
            + customs_duty
            + customs_fee
            + recycling_fee
            + (451 * usd_rate)
            + 30000
            + 8000
        )

        total_cost_usd = total_cost / usd_rate
        total_cost_krw = total_cost / krw_rub_rate

        car_data["agent_korea_rub"] = 50000
        car_data["agent_korea_usd"] = 50000 / usd_rate
        car_data["agent_korea_krw"] = 50000 / krw_rub_rate

        car_data["advance_rub"] = 1000000 * krw_rub_rate
        car_data["advance_usd"] = (1000000 * krw_rub_rate) / usd_rate
        car_data["advance_krw"] = 1000000

        car_data["car_price_krw"] = price_krw - 1000000
        car_data["car_price_usd"] = (price_krw - 1000000) * krw_rub_rate / usd_rate
        car_data["car_price_rub"] = (price_krw - 1000000) * krw_rub_rate

        car_data["dealer_korea_usd"] = 440000 * krw_rub_rate / usd_rate
        car_data["dealer_korea_krw"] = 440000
        car_data["dealer_korea_rub"] = 440000 * krw_rub_rate

        car_data["delivery_korea_usd"] = 100000 * krw_rub_rate / usd_rate
        car_data["delivery_korea_krw"] = 100000
        car_data["delivery_korea_rub"] = 100000 * krw_rub_rate

        car_data["transfer_korea_usd"] = 350000 * krw_rub_rate / usd_rate
        car_data["transfer_korea_krw"] = 350000
        car_data["transfer_korea_rub"] = 350000 * krw_rub_rate

        car_data["freight_korea_usd"] = 600
        car_data["freight_korea_krw"] = 600 * usd_rate / krw_rub_rate
        car_data["freight_korea_rub"] = 600 * usd_rate

        car_data["korea_total_usd"] = (
            +((price_krw) * krw_rub_rate / usd_rate)
            + (440000 * krw_rub_rate / usd_rate)
            + (100000 * krw_rub_rate / usd_rate)
            + (350000 * krw_rub_rate / usd_rate)
            + (600)
        )

        car_data["korea_total_krw"] = (
            +(price_krw)
            + (440000)
            + (100000)
            + 350000
            + (600 * usd_rate / krw_rub_rate)
        )

        car_data["korea_total_rub"] = (
            +(price_krw * krw_rub_rate)
            + (440000 * krw_rub_rate)
            + (100000 * krw_rub_rate)
            + (350000 * krw_rub_rate)
            + (600 * usd_rate)
        )

        # –†–∞—Å—Ö–æ–¥—ã –†–æ—Å—Å–∏—è
        car_data["customs_duty_usd"] = customs_duty / usd_rate
        car_data["customs_duty_krw"] = customs_duty * rub_to_krw_rate
        car_data["customs_duty_rub"] = customs_duty

        car_data["customs_fee_usd"] = customs_fee / usd_rate
        car_data["customs_fee_krw"] = customs_fee / krw_rub_rate
        car_data["customs_fee_rub"] = customs_fee

        car_data["util_fee_usd"] = recycling_fee / usd_rate
        car_data["util_fee_krw"] = recycling_fee / krw_rub_rate
        car_data["util_fee_rub"] = recycling_fee

        car_data["broker_russia_usd"] = (
            ((customs_duty + customs_fee + recycling_fee) / 100) * 1.5 + 30000
        ) / usd_rate
        car_data["broker_russia_krw"] = (
            ((customs_duty + customs_fee + recycling_fee) / 100) * 1.5 + 30000
        ) * rub_to_krw_rate
        car_data["broker_russia_rub"] = (
            (customs_duty + customs_fee + recycling_fee) / 100
        ) * 1.5 + 30000

        car_data["svh_russia_usd"] = 50000 / usd_rate
        car_data["svh_russia_krw"] = 50000 / krw_rub_rate
        car_data["svh_russia_rub"] = 50000

        car_data["lab_russia_usd"] = 30000 / usd_rate
        car_data["lab_russia_krw"] = 30000 / krw_rub_rate
        car_data["lab_russia_rub"] = 30000

        car_data["perm_registration_russia_usd"] = 8000 / usd_rate
        car_data["perm_registration_russia_krw"] = 8000 / krw_rub_rate
        car_data["perm_registration_russia_rub"] = 8000

        preview_link = f"https://fem.encar.com/cars/detail/{car_id}"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_message = (
            f"{car_title}\n\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {age_formatted} (–¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {month}/{year})\n"
            f"–ü—Ä–æ–±–µ–≥: {formatted_mileage}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –ö–æ—Ä–µ–µ: ‚Ç©{format_number(price_krw)}\n"
            f"–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume_formatted}\n"
            f"–ö–ü–ü: {formatted_transmission}\n\n"
            f"üü∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥ –∫–ª—é—á –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞</b>:\n<b>‚Ç©{format_number(total_cost_krw)}</b> | <b>{format_number(total_cost)} ‚ÇΩ</b>\n\n\n"
            f"üá∞üá∑ <i>–†–∞—Å—Ö–æ–¥—ã –ø–æ –ö–æ—Ä–µ–µ</i>\n\n"
            f"<i>–ü–ï–†–í–ê–Ø –ß–ê–°–¢–¨ –û–ü–õ–ê–¢–´</i>:\n\n"
            f"‚ñ™Ô∏è –ó–∞–¥–∞—Ç–æ–∫ (–±—Ä–æ–Ω—å –∞–≤—Ç–æ):\n<b>‚Ç©1,000,000</b> | <b>{format_number(car_data['advance_rub'])} ‚ÇΩ</b>\n\n\n"
            f"<i>–í–¢–û–†–ê–Ø –ß–ê–°–¢–¨ –û–ü–õ–ê–¢–´</i>:\n\n"
            f"‚ñ™Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–∑–∞ –≤—ã—á–µ—Ç–æ–º –∑–∞–¥–∞—Ç–∫–∞):\n<b>‚Ç©{format_number(car_data['car_price_krw'])}</b> | <b>{format_number(car_data['car_price_rub'])} ‚ÇΩ</b>\n\n"
            f"‚ñ™Ô∏è –î–∏–ª–ª–µ—Ä—Å–∫–∏–π —Å–±–æ—Ä:\n<b>‚Ç©{format_number(car_data['dealer_korea_krw'])}</b> | <b>{format_number(car_data['dealer_korea_rub'])} ‚ÇΩ</b>\n\n"
            f"‚ñ™Ô∏è –î–æ—Å—Ç–∞–≤–∫–∞, —Å–Ω—è—Ç–∏–µ —Å —É—á—ë—Ç–∞, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:\n<b>‚Ç©{format_number(car_data['delivery_korea_krw'])}</b> | <b>{format_number(car_data['delivery_korea_rub'])} ‚ÇΩ</b>\n\n"
            f"‚ñ™Ô∏è –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ –≤ –ø–æ—Ä—Ç:\n<b>‚Ç©{format_number(car_data['transfer_korea_krw'])}</b> | <b>{format_number(car_data['transfer_korea_rub'])} ‚ÇΩ</b>\n\n"
            f"‚ñ™Ô∏è –§—Ä–∞—Ö—Ç (–ü–∞—Ä–æ–º –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞):\n<b>‚Ç©{format_number(car_data['freight_korea_krw'])}</b> | <b>{format_number(car_data['freight_korea_rub'])} ‚ÇΩ</b>\n\n"
            f"üü∞ <b>–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –ö–æ—Ä–µ–µ</b>:\n<b>‚Ç©{format_number(car_data['korea_total_krw'])}</b> | <b>{format_number(car_data['korea_total_rub'])} ‚ÇΩ</b>\n\n\n"
            f"üá∑üá∫ <i>–†–∞—Å—Ö–æ–¥—ã –ø–æ –†–æ—Å—Å–∏–∏</i>:\n\n"
            f"‚ñ™Ô∏è <b>–ï–¥–∏–Ω–∞—è —Ç–∞–º–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞</b>:\n<b>‚Ç©{format_number(car_data['customs_duty_krw'])}</b> | <b>{format_number(car_data['customs_duty_rub'])} ‚ÇΩ</b>\n\n"
            f"‚ñ™Ô∏è <b>–¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ</b>:\n<b>‚Ç©{format_number(car_data['customs_fee_krw'])}</b> | <b>{format_number(car_data['customs_fee_rub'])} ‚ÇΩ</b>\n\n"
            f"‚ñ™Ô∏è <b>–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä</b>:\n<b>‚Ç©{format_number(car_data['util_fee_krw'])}</b> | <b>{format_number(car_data['util_fee_rub'])} ‚ÇΩ</b>\n\n\n"
            f"‚ñ™Ô∏è –ê–≥–µ–Ω—Ç—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É:\n<b>‚Ç©{format_number(car_data['agent_korea_krw'])}</b> | <b>50,000 ‚ÇΩ</b>\n\n"
            f"‚ñ™Ô∏è –ë—Ä–æ–∫–µ—Ä-–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫:\n<b>‚Ç©{format_number(car_data['broker_russia_krw'])}</b> | <b>{format_number(car_data['broker_russia_rub'])} ‚ÇΩ</b>\n\n"
            f"‚ñ™Ô∏è –°–í–•-–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫:\n<b>‚Ç©{format_number(car_data['svh_russia_krw'])}</b> | <b>{format_number(car_data['svh_russia_rub'])} ‚ÇΩ</b>\n\n"
            f"‚ñ™Ô∏è –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è, –°–ë–ö–¢–°, –≠–ü–¢–°:\n<b>‚Ç©{format_number(car_data['lab_russia_krw'])}</b> | <b>{format_number(car_data['lab_russia_rub'])} ‚ÇΩ</b>\n\n"
            f"‚ñ™Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è-–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫:\n<b>‚Ç©{format_number(car_data['perm_registration_russia_krw'])}</b> | <b>{format_number(car_data['perm_registration_russia_rub'])} ‚ÇΩ</b>\n\n"
            f"‚ÄºÔ∏è <b>–î–æ—Å—Ç–∞–≤–∫—É –¥–æ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @Petrov1982_777</b>\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥ –∫–ª—é—á –∞–∫—Ç—É–∞–ª—å–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, –≤–æ–∑–º–æ–∂–Ω—ã –∫–æ–ª–µ–±–∞–Ω–∏—è –∫—É—Ä—Å–∞ –Ω–∞ 3-5% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ, –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n"
            f"üîó <a href='{preview_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å</a>\n\n"
            "üîó <a href='https://t.me/stok_auto_krd'>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª</a>\n"
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = types.InlineKeyboardMarkup()
        # keyboard.add(
        #     types.InlineKeyboardButton("–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á—ë—Ç–∞", callback_data="detail")
        # )
        keyboard.add(
            types.InlineKeyboardButton(
                "–í—ã–ø–ª–∞—Ç—ã –ø–æ –î–¢–ü",
                callback_data="technical_report",
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/Petrov1982_777"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—á—ë—Ç –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        media_group = []
        for photo_url in sorted(car_photos):
            try:
                response = requests.get(photo_url)
                if response.status_code == 200:
                    photo = BytesIO(response.content)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–º—è—Ç—å
                    media_group.append(
                        types.InputMediaPhoto(photo)
                    )  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫

                    # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ 10 —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
                    if len(media_group) == 10:
                        bot.send_media_group(message.chat.id, media_group)
                        media_group.clear()  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø—ã
                else:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {photo_url} - {response.status_code}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ {photo_url}: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 10
        if media_group:
            bot.send_media_group(message.chat.id, media_group)

        bot.send_message(
            message.chat.id,
            result_message,
            parse_mode="HTML",
            reply_markup=keyboard,
        )

        bot.delete_message(
            message.chat.id, processing_message.message_id
        )  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É

    else:
        send_error_message(
            message,
            "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )
        bot.delete_message(message.chat.id, processing_message.message_id)


# Function to get insurance total
def get_insurance_total():
    global car_id_external, vehicle_no, vehicle_id

    print_message("[–ó–ê–ü–†–û–°] –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –û–¢–ß√ã–¢ –û–ë –ê–í–¢–û–ú–û–ë–ò–õ–ï")

    formatted_vehicle_no = urllib.parse.quote(str(vehicle_no).strip())
    url = f"https://api.encar.com/v1/readside/record/vehicle/{str(vehicle_id)}/open?vehicleNo={formatted_vehicle_no}"

    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
            "Referer": "http://www.encar.com/",
            "Cache-Control": "max-age=0",
            "Connection": "keep-alive",
        }

        response = requests.get(url, headers)
        json_response = response.json()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        damage_to_my_car = json_response["myAccidentCost"]
        damage_to_other_car = json_response["otherAccidentCost"]

        print(
            f"–í—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: {format_number(damage_to_my_car)}"
        )
        print(f"–í—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: {format_number(damage_to_other_car)}")

        return [format_number(damage_to_my_car), format_number(damage_to_other_car)]

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return ["", ""]


# Callback query handler
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    global car_data, car_id_external, usd_rate

    if call.data.startswith("detail") or call.data.startswith("detail_manual"):
        print_message("[–ó–ê–ü–†–û–°] –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–°–ß√ã–¢–ê")

        detail_message = (
            f"<i>–ü–ï–†–í–ê–Ø –ß–ê–°–¢–¨ –û–ü–õ–ê–¢–´</i>:\n\n"
            f"–ó–∞–¥–∞—Ç–æ–∫ (–±—Ä–æ–Ω—å –∞–≤—Ç–æ):\n<b>‚Ç©1,000,000</b> | <b>{format_number(car_data['advance_rub'])} ‚ÇΩ</b>\n\n\n"
            f"<i>–í–¢–û–†–ê–Ø –ß–ê–°–¢–¨ –û–ü–õ–ê–¢–´</i>:\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–∑–∞ –≤—ã—á–µ—Ç–æ–º –∑–∞–¥–∞—Ç–∫–∞):\n<b>‚Ç©{format_number(car_data['car_price_krw'])}</b> | <b>{format_number(car_data['car_price_rub'])} ‚ÇΩ</b>\n\n"
            f"–î–∏–ª–ª–µ—Ä—Å–∫–∏–π —Å–±–æ—Ä:\n<b>‚Ç©{format_number(car_data['dealer_korea_krw'])}</b> | <b>{format_number(car_data['dealer_korea_rub'])} ‚ÇΩ</b>\n\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞, —Å–Ω—è—Ç–∏–µ —Å —É—á—ë—Ç–∞, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:\n<b>‚Ç©{format_number(car_data['delivery_korea_krw'])}</b> | <b>{format_number(car_data['delivery_korea_rub'])} ‚ÇΩ</b>\n\n"
            f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ –≤ –ø–æ—Ä—Ç:\n<b>‚Ç©{format_number(car_data['transfer_korea_krw'])}</b> | <b>{format_number(car_data['transfer_korea_rub'])} ‚ÇΩ</b>\n\n"
            f"–§—Ä–∞—Ö—Ç (–ü–∞—Ä–æ–º –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞):\n<b>‚Ç©{format_number(car_data['freight_korea_krw'])}</b> | <b>{format_number(car_data['freight_korea_rub'])} ‚ÇΩ</b>\n\n"
            f"<b>–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –ö–æ—Ä–µ–µ</b>:\n<b>‚Ç©{format_number(car_data['korea_total_krw'])}</b> | <b>{format_number(car_data['korea_total_rub'])} ‚ÇΩ</b>\n\n\n"
            f"<i>–†–ê–°–•–û–î–´ –†–û–°–°–ò–Ø</i>:\n\n\n"
            f"–ï–¥–∏–Ω–∞—è —Ç–∞–º–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞:\n<b>‚Ç©{format_number(car_data['customs_duty_krw'])}</b> | <b>{format_number(car_data['customs_duty_rub'])} ‚ÇΩ</b>\n\n"
            f"–¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:\n<b>‚Ç©{format_number(car_data['customs_fee_krw'])}</b> | <b>{format_number(car_data['customs_fee_rub'])} ‚ÇΩ</b>\n\n"
            f"–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä:\n<b>‚Ç©{format_number(car_data['util_fee_krw'])}</b> | <b>{format_number(car_data['util_fee_rub'])} ‚ÇΩ</b>\n\n\n"
            f"–ê–≥–µ–Ω—Ç—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É:\n<b>‚Ç©{format_number(car_data['agent_korea_krw'])}</b> | <b>50,000 ‚ÇΩ</b>\n\n"
            f"–ë—Ä–æ–∫–µ—Ä-–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫:\n<b>‚Ç©{format_number(car_data['broker_russia_krw'])}</b> | <b>{format_number(car_data['broker_russia_rub'])} ‚ÇΩ</b>\n\n"
            f"–°–í–•-–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫:\n<b>‚Ç©{format_number(car_data['svh_russia_krw'])}</b> | <b>{format_number(car_data['svh_russia_rub'])} ‚ÇΩ</b>\n\n"
            f"–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è, –°–ë–ö–¢–°, –≠–ü–¢–°:\n<b>‚Ç©{format_number(car_data['lab_russia_krw'])}</b> | <b>{format_number(car_data['lab_russia_rub'])} ‚ÇΩ</b>\n\n"
            f"–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è-–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫:\n<b>‚Ç©{format_number(car_data['perm_registration_russia_krw'])}</b> | <b>{format_number(car_data['perm_registration_russia_rub'])} ‚ÇΩ</b>\n\n"
            f"<b>–î–æ—Å—Ç–∞–≤–∫—É –¥–æ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @Petrov1982_777</b>\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥ –∫–ª—é—á –∞–∫—Ç—É–∞–ª—å–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, –≤–æ–∑–º–æ–∂–Ω—ã –∫–æ–ª–µ–±–∞–Ω–∏—è –∫—É—Ä—Å–∞ –Ω–∞ 3-5% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ, –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n"
        )

        # Inline buttons for further actions
        keyboard = types.InlineKeyboardMarkup()

        if call.data.startswith("detail_manual"):
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another_manual",
                )
            )
        else:
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )

        keyboard.add(
            types.InlineKeyboardButton(
                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/Petrov1982_777"
            )
        )

        bot.send_message(
            call.message.chat.id,
            detail_message,
            parse_mode="HTML",
            reply_markup=keyboard,
        )

    elif call.data == "technical_report":
        bot.send_message(
            call.message.chat.id,
            "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –æ—Ç—á—ë—Ç –ø–æ –î–¢–ü. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥",
        )

        # Retrieve insurance information
        insurance_info = get_insurance_total()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
        if (
            insurance_info is None
            or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" in insurance_info[0]
            or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" in insurance_info[1]
        ):
            error_message = (
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç–∞—Ö. \n\n"
                f'<a href="https://fem.encar.com/cars/report/accident/{car_id_external}">üîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –≤—Ä—É—á–Ω—É—é üîó</a>\n\n\n'
                f"<b>–ù–∞–π–¥–∏—Ç–µ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏:</b>\n\n"
                f"Î≥¥ÌóòÏÇ¨Í≥† Ïù¥Î†• (ÎÇ¥Ï∞® ÌîºÌï¥) - –í—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é\n"
                f"Î≥¥ÌóòÏÇ¨Í≥† Ïù¥Î†• (ÌÉÄÏ∞® Í∞ÄÌï¥) - –í—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –î–¢–ü"
            )

            # Inline buttons for further actions
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/Petrov1982_777"
                )
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            bot.send_message(
                call.message.chat.id,
                error_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
        else:
            current_car_insurance_payments = (
                "0" if len(insurance_info[0]) == 0 else insurance_info[0]
            )
            other_car_insurance_payments = (
                "0" if len(insurance_info[1]) == 0 else insurance_info[1]
            )

            # Construct the message for the technical report
            tech_report_message = (
                f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: \n<b>{current_car_insurance_payments} ‚Ç©</b>\n\n"
                f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –î–¢–ü: \n<b>{other_car_insurance_payments} ‚Ç©</b>\n\n"
                f'<a href="https://fem.encar.com/cars/report/inspect/{car_id_external}">üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ö–µ–º—É –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∫—É–∑–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ üîó</a>'
            )

            # Inline buttons for further actions
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/Petrov1982_777"
                )
            )

            bot.send_message(
                call.message.chat.id,
                tech_report_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )

    elif call.data == "calculate_another":
        bot.send_message(
            call.message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com:",
        )

    elif call.data == "calculate_another_manual":
        user_id = call.message.chat.id
        user_manual_input[user_id] = {}  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –≤—ã–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –¥–ª—è –æ–∫—Ç—è–±—Ä—è):")
        bot.register_next_step_handler(call.message, process_manual_month)

    elif call.data == "main_menu":
        bot.send_message(
            call.message.chat.id, "üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu()
        )

    elif call.data == "check_subscription":
        user_id = call.message.chat.id
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        try:
            if is_subscribed(user_id):
                bot.send_message(
                    user_id,
                    "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
                    reply_markup=main_menu(),
                )
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω")
            else:
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton(
                        "üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/stok_auto_krd"
                    )
                )
                keyboard.add(
                    types.InlineKeyboardButton(
                        "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"
                    )
                )
                bot.send_message(
                    user_id,
                    "üö´ –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=keyboard,
                )
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            bot.send_message(
                user_id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu(),
            )


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global user_manual_input

    user_id = message.chat.id
    user_message = message.text.strip()

    if not is_subscribed(user_id):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/stok_auto_krd"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"
            )
        )
        bot.send_message(
            user_id,
            "üö´ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
            reply_markup=keyboard,
        )
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
    if user_message == CALCULATE_CAR_TEXT:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com:",
        )

    elif user_message == MANUAL_CAR_TEXT:
        user_manual_input[user_id] = {}  # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –≤—ã–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –¥–ª—è –æ–∫—Ç—è–±—Ä—è):")
        bot.register_next_step_handler(message, process_manual_month)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
    elif re.match(r"^https?://(www|fem)\.encar\.com/.*", user_message):
        calculate_cost(user_message, message)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
    elif user_message == "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É":
        bot.send_message(
            message.chat.id,
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ —Å—Å—ã–ª–∫–µ: @Petrov1982_777",
        )
    elif user_message == "–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp":
        whatsapp_link = "https://wa.me/821030485191"  # –í–ª–∞–¥–∏–º–∏—Ä –ö–∞–Ω

        message_text = f"{whatsapp_link} - –í–ª–∞–¥–∏–º–∏—Ä (–ö–æ—Ä–µ—è)"

        bot.send_message(
            message.chat.id,
            message_text,
        )
    elif user_message == "–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Å?":
        about_message = (
            "üîπ *–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç GetAuto?*\n\n"
            "üöó *–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ–ø—ã—Ç* ‚Äî –ú—ã –∑–Ω–∞–µ–º –≤—Å–µ –Ω—é–∞–Ω—Å—ã –ø–æ–¥–±–æ—Ä–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–≤—Ç–æ –∏–∑ –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–∏.\n\n"
            "üéØ *–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥* ‚Äî –£—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–æ–¥–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.\n\n"
            "üîß *–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ* ‚Äî –ü–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö —Å–¥–µ–ª–∫–∏.\n\n"
            "‚úÖ *–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ* ‚Äî –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ, –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n\n"
            "üí∞ *–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è* ‚Äî –ß–µ—Å—Ç–Ω—ã–µ —Ü–µ–Ω—ã, –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏ –∫–æ–º–∏—Å—Å–∏–π.\n\n"
            "üöõ *–ù–∞–¥–µ–∂–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞* ‚Äî –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –∞–≤—Ç–æ –≤ –ª—é–±—É—é —Ç–æ—á–∫—É –°–ù–ì.\n\n"
            f"üì≤ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—á—ë—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! @Petrov1982_777"
        )
        bot.send_message(message.chat.id, about_message, parse_mode="Markdown")

    elif user_message == "–ú—ã –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö":
        channel_link = "https://t.me/stok_auto_krd"
        instagram_link = "https://www.instagram.com/petrov_avto_krd/"
        youtube_link = "https://www.youtube.com/@%D0%9F%D0%B5%D1%82%D1%80%D0%BE%D0%B2%D0%A1%D1%82%D0%BE%D0%BA%D0%90%D0%B2%D1%82%D0%BE"
        # dzen_link = "https://dzen.ru/getauto_ru"
        # vk_link = "https://vk.com/getauto_korea"

        message_text = f"–ù–∞—à –¢–µ–ª–µ–≥—Ä–∞–º –ö–∞–Ω–∞–ª: \n{channel_link}\n\n–ù–∞—à –ò–Ω—Å—Ç–∞–≥—Ä–∞–º: \n{instagram_link}\n\n–ù–∞—à YouTube –ö–∞–Ω–∞–ª: \n{youtube_link}\n\n"

        bot.send_message(message.chat.id, message_text)

    elif user_message == "–û—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–µ–¥–∏—Ç":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):")
        bot.register_next_step_handler(message, process_credit_full_name)

    else:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com –∏–ª–∏ fem.encar.com.",
        )


#######################
# –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—Ä–µ–¥–∏—Ç #
#######################
def process_credit_full_name(message):
    user_id = message.chat.id
    full_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –§–ò–û —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞
    if len(full_name.split()) < 2:
        bot.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):")
        bot.register_next_step_handler(message, process_credit_full_name)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(message, process_credit_phone, full_name)


def process_credit_phone(message, full_name):
    user_id = message.chat.id
    phone_number = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not re.match(r"^\+?\d{10,15}$", phone_number):
        bot.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(message, process_credit_phone, full_name)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_credit_application(user_id, full_name, phone_number)

    bot.send_message(
        user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫—Ä–µ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è."
    )


def save_credit_application(user_id, full_name, phone_number):
    conn = psycopg2.connect(DATABASE_URL, sslmode="require")
    cursor = conn.cursor()

    cursor.execute(
        """
        INSERT INTO credit_applications (user_id, full_name, phone_number)
        VALUES (%s, %s, %s)
        """,
        (user_id, full_name, phone_number),
    )

    conn.commit()
    cursor.close()
    conn.close()
    print("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –∫—Ä–µ–¥–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")


#######################
# –î–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ #
#######################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–µ—Å—è—Ü–∞
def process_manual_month(message):
    user_id = message.chat.id
    user_input = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É, –∞ –Ω–µ –≤–≤—ë–ª —á–∏—Å–ª–æ
    if user_input in [
        CALCULATE_CAR_TEXT,
        MANUAL_CAR_TEXT,
        "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É",
        "–û –Ω–∞—Å",
        "–ú—ã –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö",
        "–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp",
    ]:
        handle_message(message)  # –ü–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–æ–º–∞–Ω–¥
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞ –º–µ—Å—è—Ü–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –º–µ—Å—è—Ü–∞
    if not user_input.isdigit() or not (1 <= int(user_input) <= 12):
        bot.send_message(user_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12.")
        bot.register_next_step_handler(message, process_manual_month)
        return

    # –ï—Å–ª–∏ –≤—Å—ë –æ–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    user_manual_input[user_id]["month"] = int(user_input)
    bot.send_message(
        user_id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2021):"
    )
    bot.register_next_step_handler(message, process_manual_year)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ–¥–∞
def process_manual_year(message):
    user_id = message.chat.id
    user_input = message.text.strip()

    if not user_input.isdigit() or not (
        1980 <= int(user_input) <= datetime.datetime.now().year
    ):
        bot.send_message(
            user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥! –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –æ—Ç 1980 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞:"
        )
        bot.register_next_step_handler(message, process_manual_year)
        return

    user_manual_input[user_id]["year"] = int(user_input)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ CC (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2000):")
    bot.register_next_step_handler(message, process_manual_engine)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–±—ä—ë–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
def process_manual_engine(message):
    user_id = message.chat.id
    user_input = message.text.strip()

    if not user_input.isdigit() or not (500 <= int(user_input) <= 10000):
        bot.send_message(
            user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä—ë–º! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 500 –¥–æ 10000 CC:"
        )
        bot.register_next_step_handler(message, process_manual_engine)
        return

    user_manual_input[user_id]["engine_volume"] = int(user_input)
    bot.send_message(
        user_id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –ö–æ—Ä–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30000000):"
    )
    bot.register_next_step_handler(message, process_manual_price)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
def process_manual_price(message):
    user_id = message.chat.id
    user_input = message.text.strip()

    if not user_input.isdigit() or not (1000000 <= int(user_input) <= 1000000000000):
        bot.send_message(
            user_id,
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç 1 000 000 –¥–æ 200 000 000 KRW:",
        )
        bot.register_next_step_handler(message, process_manual_price)
        return

    user_manual_input[user_id]["price_krw"] = int(user_input)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á—ë—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    calculate_manual_cost(user_id)


# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ
def calculate_manual_cost(user_id):
    global rub_to_krw_rate, usd_rate, krw_rub_rate

    data = user_manual_input[user_id]

    price_krw = data["price_krw"]
    engine_volume = data["engine_volume"]
    month = data["month"]
    year = data["year"]

    car_engine_displacement = int(engine_volume)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    engine_volume_formatted = f"{format_number(car_engine_displacement)} cc"
    age = calculate_age(year, month)
    age_formatted = (
        "–¥–æ 3 –ª–µ—Ç"
        if age == "0-3"
        else (
            "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç"
            if age == "3-5"
            else "–æ—Ç 5 –¥–æ 7 –ª–µ—Ç" if age == "5-7" else "–æ—Ç 7 –ª–µ—Ç"
        )
    )

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –≤ —Ä—É–±–ª–∏
    price_krw = int(price_krw)

    response = get_customs_fees(
        car_engine_displacement,
        price_krw,
        year,
        month,
        engine_type=1,
    )

    customs_fee = clean_number(response["sbor"])
    customs_duty = clean_number(response["tax"])
    recycling_fee = clean_number(response["util"])

    # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ä—É–±–ª—è—Ö
    total_cost = (
        50000
        + (price_krw * krw_rub_rate)
        + (440000 * krw_rub_rate)
        + (100000 * krw_rub_rate)
        + (350000 * krw_rub_rate)
        + (600 * usd_rate)
        + (customs_duty)
        + customs_fee
        + recycling_fee
        + (451 * usd_rate)
        + 50000
        + 30000
        + 8000
    )

    total_cost_usd = total_cost / usd_rate
    total_cost_krw = total_cost / krw_rub_rate

    car_data["agent_korea_rub"] = 50000
    car_data["agent_korea_usd"] = 50000 / usd_rate
    car_data["agent_korea_krw"] = 50000 / krw_rub_rate

    car_data["advance_rub"] = 1000000 * krw_rub_rate
    car_data["advance_usd"] = (1000000 * krw_rub_rate) / usd_rate
    car_data["advance_krw"] = 1000000

    car_data["car_price_krw"] = price_krw - 1000000
    car_data["car_price_usd"] = (price_krw - 1000000) * krw_rub_rate / usd_rate
    car_data["car_price_rub"] = (price_krw - 1000000) * krw_rub_rate

    car_data["dealer_korea_usd"] = 440000 * krw_rub_rate / usd_rate
    car_data["dealer_korea_krw"] = 440000
    car_data["dealer_korea_rub"] = 440000 * krw_rub_rate

    car_data["delivery_korea_usd"] = 100000 * krw_rub_rate / usd_rate
    car_data["delivery_korea_krw"] = 100000
    car_data["delivery_korea_rub"] = 100000 * krw_rub_rate

    car_data["transfer_korea_usd"] = 350000 * krw_rub_rate / usd_rate
    car_data["transfer_korea_krw"] = 350000
    car_data["transfer_korea_rub"] = 350000 * krw_rub_rate

    car_data["freight_korea_usd"] = 600
    car_data["freight_korea_krw"] = 600 * usd_rate / krw_rub_rate
    car_data["freight_korea_rub"] = 600 * usd_rate

    car_data["korea_total_usd"] = (
        (50000 / usd_rate)
        + ((1000000 * krw_rub_rate) / usd_rate)
        + ((price_krw) * krw_rub_rate / usd_rate)
        + (440000 * krw_rub_rate / usd_rate)
        + (100000 * krw_rub_rate / usd_rate)
        + (350000 * krw_rub_rate / usd_rate)
        + (600)
    )

    car_data["korea_total_krw"] = (
        (50000 / krw_rub_rate)
        + (1000000)
        + (price_krw)
        + (440000)
        + (100000)
        + 350000
        + (600 * usd_rate / krw_rub_rate)
    )

    car_data["korea_total_rub"] = (
        (50000)
        + (1000000 * krw_rub_rate)
        + (price_krw * krw_rub_rate)
        + (440000 * krw_rub_rate)
        + (100000 * krw_rub_rate)
        + (350000 * krw_rub_rate)
        + (600 * usd_rate)
    )

    # –†–∞—Å—Ö–æ–¥—ã –†–æ—Å—Å–∏—è
    car_data["customs_duty_usd"] = customs_duty / usd_rate
    car_data["customs_duty_krw"] = customs_duty * rub_to_krw_rate
    car_data["customs_duty_rub"] = customs_duty

    car_data["customs_fee_usd"] = customs_fee / usd_rate
    car_data["customs_fee_krw"] = customs_fee / krw_rub_rate
    car_data["customs_fee_rub"] = customs_fee

    car_data["util_fee_usd"] = recycling_fee / usd_rate
    car_data["util_fee_krw"] = recycling_fee / krw_rub_rate
    car_data["util_fee_rub"] = recycling_fee

    car_data["broker_russia_usd"] = (
        ((customs_duty + customs_fee + recycling_fee) / 100) * 1.5 + 30000
    ) / usd_rate
    car_data["broker_russia_krw"] = (
        ((customs_duty + customs_fee + recycling_fee) / 100) * 1.5 + 30000
    ) * rub_to_krw_rate
    car_data["broker_russia_rub"] = (
        (customs_duty + customs_fee + recycling_fee) / 100
    ) * 1.5 + 30000

    car_data["svh_russia_usd"] = 50000 / usd_rate
    car_data["svh_russia_krw"] = 50000 / krw_rub_rate
    car_data["svh_russia_rub"] = 50000

    car_data["lab_russia_usd"] = 30000 / usd_rate
    car_data["lab_russia_krw"] = 30000 / krw_rub_rate
    car_data["lab_russia_rub"] = 30000

    car_data["perm_registration_russia_usd"] = 8000 / usd_rate
    car_data["perm_registration_russia_krw"] = 8000 / krw_rub_rate
    car_data["perm_registration_russia_rub"] = 8000

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    result_message = (
        f"–í–æ–∑—Ä–∞—Å—Ç: {age_formatted}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –ö–æ—Ä–µ–µ: ‚Ç©{format_number(price_krw)}\n"
        f"–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume_formatted}\n\n"
        f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–¥ –∫–ª—é—á –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞:\n"
        f"<b>‚Ç©{format_number(total_cost_krw)}</b> | "
        f"<b>{format_number(total_cost)} ‚ÇΩ</b>\n\n"
        "–ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @Petrov1982_777\n\n"
        "üîó <a href='https://t.me/stok_auto_krd'>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª</a>\n"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á—ë—Ç–∞", callback_data="detail_manual")
    )
    keyboard.add(
        types.InlineKeyboardButton(
            "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data="calculate_another_manual"
        )
    )
    keyboard.add(
        types.InlineKeyboardButton(
            "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/Petrov1982_777"
        )
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(user_id, result_message, parse_mode="HTML", reply_markup=keyboard)


# Run the bot
if __name__ == "__main__":
    rub_to_krw_rate = get_rub_to_krw_rate()
    get_currency_rates()
    set_bot_commands()
    bot.polling(non_stop=True)
